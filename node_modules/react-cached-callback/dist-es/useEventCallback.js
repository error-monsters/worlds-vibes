import { useRef, useLayoutEffect, useCallback } from 'react';
export default function useEventCallback(fn) {
    var ref = useRef(function () {
        if (typeof console !== 'undefined' && typeof console.warn === 'function') {
            console.warn('useEventCallback. You should not call an event handler while rendering.');
        }
    });
    useLayoutEffect(function () {
        ref.current = fn;
    });
    return useCallback(function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var fn = ref.current;
        return fn.apply(void 0, args);
    }, [ref]);
}

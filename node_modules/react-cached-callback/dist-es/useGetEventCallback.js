import { useRef, useEffect } from 'react';
import initGetKey from './getKey';
export default function useGetEventCallback(createCallback, params) {
    return useGetEventCallbackInner(createCallback, initGetKey(params));
}
function useGetEventCallbackInner(createCallback, getCacheKey) {
    var callbacksCache = useRef();
    if (!callbacksCache.current) {
        callbacksCache.current = {};
    }
    useEffect(function () {
        // update old and clear unused callbacks
        Object.keys(callbacksCache.current).forEach(function (cacheKey) {
            if (callbacksCache.current[cacheKey].next) {
                callbacksCache.current[cacheKey].cached = callbacksCache.current[cacheKey].next;
                delete callbacksCache.current[cacheKey].next;
            }
            else {
                delete callbacksCache.current[cacheKey];
            }
        });
    });
    return (function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var cacheKey = getCacheKey.apply(void 0, args);
        var cache4Function = callbacksCache.current[cacheKey];
        if (!cache4Function) {
            cache4Function = {};
            cache4Function.cached = function () {
                if (typeof console !== 'undefined' && typeof console.warn === 'function') {
                    console.warn('useEventCallbacks. You should not call an event handler while rendering.');
                }
            };
            cache4Function.func = function () {
                var callArgs = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    callArgs[_i] = arguments[_i];
                }
                return cache4Function.cached.apply(cache4Function, callArgs);
            };
            callbacksCache.current[cacheKey] = cache4Function;
        }
        cache4Function.next = createCallback.apply(void 0, args);
        return cache4Function.func;
    });
}

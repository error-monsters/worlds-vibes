import { useRef, useEffect } from 'react';
import { getCache, setCache, arraysEqual } from './common';
import initGetKey from './getKey';
var FUNCTION_NAME = 'callback';
export default function useGetCallback(createCallback, params, _usedValues) {
    var _a = checkParams(params, _usedValues), initGetKeyParams = _a[0], usedValues = _a[1];
    return useGetCallbackInner(createCallback, initGetKey(initGetKeyParams), usedValues);
}
export function useGetCallbackInner(createCallback, getKey, usedValues) {
    var _this = this;
    var callbacksCache = useRef();
    if (!callbacksCache.current) {
        callbacksCache.current = {};
    }
    var usedValuesRef = useRef();
    var isNewValues = !arraysEqual(usedValuesRef.current || [], usedValues || []);
    usedValuesRef.current = usedValues;
    useEffect(function () {
        // update old and clear unused callbacks
        Object.keys(callbacksCache.current[FUNCTION_NAME]).forEach(function (cacheKey) {
            if (callbacksCache.current[FUNCTION_NAME][cacheKey].yetActual) {
                delete callbacksCache.current[FUNCTION_NAME][cacheKey].yetActual;
            }
            else {
                delete callbacksCache.current[FUNCTION_NAME][cacheKey];
            }
        });
    });
    return (function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var cache4Function = getCache(callbacksCache.current, FUNCTION_NAME, getKey.apply(void 0, args));
        if (!cache4Function || isNewValues || !arraysEqual(cache4Function.args, args)) {
            cache4Function = {};
            cache4Function.func = function () {
                var callArgs = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    callArgs[_i] = arguments[_i];
                }
                return cache4Function.cached.apply(cache4Function, callArgs);
            };
            cache4Function.args = args;
            setCache(callbacksCache.current, FUNCTION_NAME, getKey.apply(void 0, args), cache4Function);
        }
        cache4Function.cached = createCallback.apply(_this, args);
        cache4Function.yetActual = true;
        return cache4Function.func;
    });
}
export function checkParams(params, usedParams) {
    return Array.isArray(params)
        ? [undefined, params]
        : [params, usedParams];
}

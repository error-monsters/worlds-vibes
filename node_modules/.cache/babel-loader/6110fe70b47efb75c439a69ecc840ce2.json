{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport initGetKey from './getKey';\nexport default function useGetEventCallback(createCallback, params) {\n  return useGetEventCallbackInner(createCallback, initGetKey(params));\n}\n\nfunction useGetEventCallbackInner(createCallback, getCacheKey) {\n  var callbacksCache = useRef();\n\n  if (!callbacksCache.current) {\n    callbacksCache.current = {};\n  }\n\n  useEffect(function () {\n    // update old and clear unused callbacks\n    Object.keys(callbacksCache.current).forEach(function (cacheKey) {\n      if (callbacksCache.current[cacheKey].next) {\n        callbacksCache.current[cacheKey].cached = callbacksCache.current[cacheKey].next;\n        delete callbacksCache.current[cacheKey].next;\n      } else {\n        delete callbacksCache.current[cacheKey];\n      }\n    });\n  });\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var cacheKey = getCacheKey.apply(void 0, args);\n    var cache4Function = callbacksCache.current[cacheKey];\n\n    if (!cache4Function) {\n      cache4Function = {};\n\n      cache4Function.cached = function () {\n        if (typeof console !== 'undefined' && typeof console.warn === 'function') {\n          console.warn('useEventCallbacks. You should not call an event handler while rendering.');\n        }\n      };\n\n      cache4Function.func = function () {\n        var callArgs = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          callArgs[_i] = arguments[_i];\n        }\n\n        return cache4Function.cached.apply(cache4Function, callArgs);\n      };\n\n      callbacksCache.current[cacheKey] = cache4Function;\n    }\n\n    cache4Function.next = createCallback.apply(void 0, args);\n    return cache4Function.func;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}
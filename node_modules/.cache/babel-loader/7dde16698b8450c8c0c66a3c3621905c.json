{"ast":null,"code":"import { arraysEqual, getCache, setCache } from './common';\nvar cachedFunctionFieldName = typeof Symbol === 'function' ? Symbol('react-cached-callback') : '__reactCachedCallbackFieldName__';\nexport default function cached(params, name, descriptor) {\n  if (typeof params === 'number') {\n    return innerCached({\n      index: params\n    });\n  } else if (typeof params === 'function') {\n    return innerCached({\n      getKey: params\n    });\n  } else if (descriptor === undefined) {\n    return innerCached(params);\n  } else {\n    return innerCached()(params, name, descriptor);\n  }\n}\n\nfunction innerCached(_a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.index,\n      index = _c === void 0 ? 0 : _c,\n      getKey = _b.getKey,\n      _d = _b.pure,\n      pure = _d === void 0 ? true : _d;\n\n  var getCacheKey = getKey ? getKey : function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return args[index];\n  };\n  return function (prototype, name, descriptor) {\n    return {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: function value() {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        if (!this[cachedFunctionFieldName]) {\n          this[cachedFunctionFieldName] = {};\n        }\n\n        var cache4Function = getCache(this[cachedFunctionFieldName], name, getCacheKey.apply(void 0, args));\n\n        if (!cache4Function) {\n          cache4Function = {};\n\n          cache4Function.func = function () {\n            var callArgs = [];\n\n            for (var _i = 0; _i < arguments.length; _i++) {\n              callArgs[_i] = arguments[_i];\n            }\n\n            return cache4Function.cached.apply(cache4Function, callArgs);\n          };\n\n          setCache(this[cachedFunctionFieldName], name, getCacheKey.apply(void 0, args), cache4Function);\n        }\n\n        if (!pure || !arraysEqual(args, cache4Function.args)) {\n          cache4Function.args = args;\n          cache4Function.cached = descriptor.value.apply(this, args);\n        }\n\n        return cache4Function.func;\n      }\n    };\n  };\n}\n\nexport function makeCached(Component, propertyName, params) {\n  var prototype = Component.prototype;\n  Object.defineProperty(prototype, propertyName, cached(params)(prototype, propertyName, Object.getOwnPropertyDescriptor(prototype, propertyName)));\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { useRef, useEffect } from 'react';\nimport { getCache, setCache, arraysEqual } from './common';\nimport initGetKey from './getKey';\nvar FUNCTION_NAME = 'callback';\nexport default function useGetCallback(createCallback, params, _usedValues) {\n  var _a = checkParams(params, _usedValues),\n      initGetKeyParams = _a[0],\n      usedValues = _a[1];\n\n  return useGetCallbackInner(createCallback, initGetKey(initGetKeyParams), usedValues);\n}\nexport function useGetCallbackInner(createCallback, getKey, usedValues) {\n  var _this = this;\n\n  var callbacksCache = useRef();\n\n  if (!callbacksCache.current) {\n    callbacksCache.current = {};\n  }\n\n  var usedValuesRef = useRef();\n  var isNewValues = !arraysEqual(usedValuesRef.current || [], usedValues || []);\n  usedValuesRef.current = usedValues;\n  useEffect(function () {\n    // update old and clear unused callbacks\n    Object.keys(callbacksCache.current[FUNCTION_NAME]).forEach(function (cacheKey) {\n      if (callbacksCache.current[FUNCTION_NAME][cacheKey].yetActual) {\n        delete callbacksCache.current[FUNCTION_NAME][cacheKey].yetActual;\n      } else {\n        delete callbacksCache.current[FUNCTION_NAME][cacheKey];\n      }\n    });\n  });\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var cache4Function = getCache(callbacksCache.current, FUNCTION_NAME, getKey.apply(void 0, args));\n\n    if (!cache4Function || isNewValues || !arraysEqual(cache4Function.args, args)) {\n      cache4Function = {};\n\n      cache4Function.func = function () {\n        var callArgs = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          callArgs[_i] = arguments[_i];\n        }\n\n        return cache4Function.cached.apply(cache4Function, callArgs);\n      };\n\n      cache4Function.args = args;\n      setCache(callbacksCache.current, FUNCTION_NAME, getKey.apply(void 0, args), cache4Function);\n    }\n\n    cache4Function.cached = createCallback.apply(_this, args);\n    cache4Function.yetActual = true;\n    return cache4Function.func;\n  };\n}\nexport function checkParams(params, usedParams) {\n  return Array.isArray(params) ? [undefined, params] : [params, usedParams];\n}","map":null,"metadata":{},"sourceType":"module"}